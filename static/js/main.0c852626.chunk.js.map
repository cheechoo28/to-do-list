{"version":3,"sources":["AddItem.tsx","reducers/taskss-reducer.ts","reducers/todolists-reducer.ts","EditableSpan.tsx","Task.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["AddItem","React","memo","props","console","log","useState","error","setError","newTitleForTask","setNewTitleForTask","addTask","trim","addItem","TextField","variant","label","title","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","color","initialState","EditableSpan","editMode","setEditMode","changeTitle","setChangeTitle","onBlur","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","task","id","toDoListId","style","paddingLeft","className","isDone","Checkbox","checked","changeStatus","removeTask","Delete","TodoList","changeTitleToDoList","newTitle","changeFilterToAll","changeFilter","changeFilterToActive","changeFilterToCompleted","tasksForTodoList","tasks","filter","t","removeToDoList","map","Button","size","App","dispatch","useDispatch","useSelector","state","toDoLists","taskID","taskId","type","removeTaskAC","addTaskAC","changeTaskStatusAC","addToDoList","titleForToDoList","v1","changeTaskTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","tasksForToDoList","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","copyState","toDoListTasks","newTask","newToDoList","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c852626.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (changeTitle: string) => void\r\n    title: string\r\n}\r\n\r\nexport const AddItem = React.memo((props: AddItemPropsType) => {\r\n    console.log('AddItem is called')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitleForTask, setNewTitleForTask] = useState<string>('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitleForTask(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTitleForTask.trim() !== '') {\r\n            props.addItem(newTitleForTask.trim())\r\n            setNewTitleForTask('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                label={[props.title]}\r\n                value={newTitleForTask}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={error}\r\n                helperText={ error && \"Title is required!\"}\r\n            />\r\n            <IconButton onClick={addTask}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {v1} from \"uuid\";\r\nimport {AddToDoListActionType, RemoveToDoListActionType} from \"./todolists-reducer\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    toDoListId: string\r\n}\r\n\r\ntype AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    toDoListId: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    toDoListId: string\r\n    isDone: boolean\r\n}\r\n\r\ntype ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    toDoListId: string\r\n    title: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddToDoListActionType\r\n    | RemoveToDoListActionType\r\n\r\n\r\ntype initialStateType = TasksType\r\n\r\nconst initialState = {}\r\n\r\nexport const tasksReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const copyState = {...state}\r\n            const toDoListTasks = copyState[action.toDoListId]\r\n            copyState[action.toDoListId] = toDoListTasks.filter(t => t.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const copyState = {...state}\r\n            const toDoListTasks = copyState[action.toDoListId]\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            copyState[action.toDoListId] = [newTask, ...toDoListTasks]\r\n            return copyState\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => {\r\n                    if (t.id === action.taskId) {\r\n                        return {...t, isDone: action.isDone}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => {\r\n                    if (t.id === action.taskId) {\r\n                        return {...t, title: action.title}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, toDoListId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        toDoListId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, toDoListId: string): AddTaskActionType => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        title,\r\n        toDoListId\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, toDoListId: string): ChangeTaskStatusActionType => {\r\n    return {\r\n        type: \"CHANGE-TASK-STATUS\",\r\n        toDoListId,\r\n        taskId,\r\n        isDone\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, toDoListId: string): ChangeTaskTitleActionType => {\r\n    return {\r\n        type: \"CHANGE-TASK-TITLE\",\r\n        toDoListId,\r\n        taskId,\r\n        title\r\n    }\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddToDoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    toDoListId: string\r\n}\r\ntype ChangeToDoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeToDoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterType\r\n    id: string\r\n}\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeToDoListTitleActionType\r\n    | ChangeToDoListFilterActionType\r\n\r\ntype InitialStateType = Array<ToDoListsType>\r\n\r\nconst initialState: InitialStateType = []\r\n\r\nexport const toDoListsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const newToDoList: ToDoListsType = {id: action.toDoListId, title: action.title, filter: \"all\"}\r\n            return [\r\n                ...state,\r\n                newToDoList\r\n            ]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, title: action.title}\r\n                } else {\r\n                    return tl\r\n                }\r\n            })\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, filter: action.filter}\r\n                } else {\r\n                    return tl\r\n                }\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const removeToDoListAC = (id: string): RemoveToDoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    }\r\n}\r\n\r\nexport const addToDoListAC = (title: string): AddToDoListActionType => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title,\r\n        toDoListId: v1()\r\n    }\r\n}\r\n\r\nexport const changeToDoListTitleAC = (id: string, title: string): ChangeToDoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id,\r\n        title\r\n    }\r\n}\r\n\r\nexport const changeToDoListFilterAC = (filter: FilterType, id: string): ChangeToDoListFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id,\r\n        filter\r\n    }\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (changeTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan is called')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [changeTitle, setChangeTitle] = useState<string>('')\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setChangeTitle(props.title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChangeTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(changeTitle)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                variant={\"standard\"}\r\n                value={changeTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            /> :\r\n            <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n    )\r\n})","import {TaskType} from \"./reducers/taskss-reducer\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskPropsType = {\r\n    toDoListId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n\r\n    const removeTask =() => props.removeTask(props.task.id, props.toDoListId)\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked, props.toDoListId)\r\n    }\r\n    const changeTaskTitle = useCallback( (changeTitle: string) => {\r\n        props.changeTitle(props.task.id, changeTitle, props.toDoListId)\r\n    },[props.changeTitle, props.toDoListId, props.task.id])\r\n\r\n    return (\r\n        <div style={{paddingLeft: \"10px\"}} className={props.task.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox checked={props.task.isDone} onChange={onChangeStatus}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})","import React, {useCallback} from \"react\";\r\nimport {AddItem} from \"./AddItem\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./reducers/taskss-reducer\";\r\nimport {FilterType} from \"./reducers/todolists-reducer\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (value: FilterType, toDoLIstID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTitleToDoList: (toDoListID: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log('ToDoList is called')\r\n    const removeToDoList = () => props.removeToDoList(props.id)\r\n\r\n    const addTask = useCallback((changeTitle: string) => {\r\n        props.addTask(changeTitle, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTitleToDoList = useCallback((newTitle: string) => {\r\n        props.changeTitleToDoList(props.id, newTitle)\r\n    }, [props.changeTitleToDoList, props.id])\r\n\r\n    const changeFilterToAll = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const changeFilterToActive = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const changeFilterToCompleted = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTitleToDoList}/>\r\n                <IconButton onClick={removeToDoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItem addItem={addTask} title={\"Task title...\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodoList.map(task => <Task key={task.id}\r\n                                                       toDoListId={props.id}\r\n                                                       task={task}\r\n                                                       removeTask={props.removeTask}\r\n                                                       changeStatus={props.changeStatus}\r\n                                                       changeTitle={props.changeTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToAll}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {AddItem} from \"./AddItem\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TasksType} from \"./reducers/taskss-reducer\";\r\nimport {\r\n    addToDoListAC,\r\n    changeToDoListFilterAC, changeToDoListTitleAC,\r\n    FilterType,\r\n    removeToDoListAC,\r\n    ToDoListsType\r\n} from \"./reducers/todolists-reducer\";\r\nimport {TodoList} from \"./TodoList\";\r\n\r\nfunction App() {\r\n    console.log('App is called')\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\r\n    const toDoLists = useSelector<RootStateType, Array<ToDoListsType>>(state => state.toDoLists)\r\n\r\n    const removeTask = useCallback( (taskID: string, toDoListId: string) => {\r\n        dispatch(removeTaskAC(taskID, toDoListId))\r\n    },[dispatch])\r\n\r\n    const changeFilter = useCallback( (value: FilterType, toDoListId: string) => {\r\n       dispatch(changeToDoListFilterAC(value, toDoListId))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback( (title: string, toDoListId: string) => {\r\n        dispatch(addTaskAC(title, toDoListId))\r\n    },[dispatch])\r\n\r\n    const changeStatus = useCallback( (taskId: string, isDone: boolean, toDoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, toDoListId))\r\n    },[dispatch])\r\n\r\n    const removeToDoList = useCallback( (toDoListId: string) => {\r\n        dispatch(removeToDoListAC(toDoListId))\r\n    },[dispatch])\r\n\r\n    const addToDoList = useCallback( (titleForToDoList: string) => {\r\n       dispatch(addToDoListAC(titleForToDoList))\r\n    },[dispatch])\r\n\r\n    const changeTaskTitle = useCallback( (taskId: string, newTitle: string, toDoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, toDoListId))\r\n    },[dispatch])\r\n\r\n    const changeTitleToDoList = useCallback((toDoListId: string, newTitle: string) => {\r\n       dispatch(changeToDoListTitleAC(toDoListId, newTitle))\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItem addItem={addToDoList} title={\"TodoList title...\"}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n\r\n\r\n                        toDoLists.map(tl => {\r\n\r\n                            const tasksForToDoList = tasks[tl.id]\r\n\r\n                            return <Grid key={tl.id} item>\r\n                                <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeToDoList={removeToDoList}\r\n                                        changeTitle={changeTaskTitle}\r\n                                        changeTitleToDoList={changeTitleToDoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./reducers/taskss-reducer\";\r\nimport {toDoListsReducer} from \"./reducers/todolists-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    toDoLists: toDoListsReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducers)\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}