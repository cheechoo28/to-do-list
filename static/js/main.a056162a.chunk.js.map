{"version":3,"sources":["api/tasksAPI.ts","AddItem.tsx","reducers/tasks-reducer.ts","api/todolistAPI.ts","reducers/todolists-reducer.ts","EditableSpan.tsx","Task.tsx","TodoList.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItem","React","memo","props","console","log","useState","error","setError","newTitleForTask","setNewTitleForTask","addTask","trim","addItem","TextField","variant","label","title","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","color","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","toDoListId","get","post","taskId","delete","model","put","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","id","apiModel","deadline","status","priority","description","startDate","then","res","type","updateTaskAC","toDoListAPI","EditableSpan","editMode","setEditMode","changeTitle","setChangeTitle","onBlur","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","style","paddingLeft","className","Completed","Checkbox","checked","changeStatus","New","removeTask","Delete","TodoList","useDispatch","useEffect","setTasksAC","data","items","changeTitleToDoList","newTitle","changeFilterToAll","changeFilter","changeFilterToActive","changeFilterToCompleted","tasksForTodoList","filter","removeToDoList","map","Button","size","App","useSelector","state","toDoLists","taskID","removeTaskAC","removeTaskTC","item","addTaskTC","removeToDoListTC","addToDoList","titleForToDoList","toDoList","changeToDoListTitleAC","updateToDoListTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","tasksForToDoList","Paper","elevation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","copyState","toDoListTasks","todoListId","newTask","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a056162a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '69175483-e93a-4825-bff5-a54b5bb568e7'\r\n    }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft= 3\r\n}\r\n\r\nexport  enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\ntype CommonResponseType<D> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(toDoListId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${toDoListId}/tasks`)\r\n    },\r\n    addTask(toDoListId: string, title: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType}>>(`todo-lists/${toDoListId}/tasks`, {title})\r\n    },\r\n    removeTask(toDoListId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${toDoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(toDoListId: string, taskId: string, model: ModelType) {\r\n        return instance.put<CommonResponseType<{item: TaskType}>>(`todo-lists/${toDoListId}/tasks/${taskId}`, model)\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (changeTitle: string) => void\r\n    title: string\r\n}\r\n\r\nexport const AddItem = React.memo((props: AddItemPropsType) => {\r\n    console.log('AddItem is called')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitleForTask, setNewTitleForTask] = useState<string>('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitleForTask(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTitleForTask.trim() !== '') {\r\n            props.addItem(newTitleForTask.trim())\r\n            setNewTitleForTask('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                label={[props.title]}\r\n                value={newTitleForTask}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={error}\r\n                helperText={ error && \"Title is required!\"}\r\n            />\r\n            <IconButton onClick={addTask}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {AddToDoListActionType, RemoveToDoListActionType, SetToDoListsActionTypes} from \"./todolists-reducer\";\r\nimport {ModelType, TaskPriorities, tasksAPI, TaskStatuses, TaskType} from \"../api/tasksAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../store\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    toDoListId: string\r\n}\r\n\r\nexport type DomainUpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | AddToDoListActionType\r\n    | RemoveToDoListActionType\r\n    | SetToDoListsActionTypes\r\n    | SetTasksActionType\r\n    | UpdateTaskActionCreator\r\n\r\n\r\ntype initialStateType = TasksType\r\n\r\nconst initialState = {}\r\n\r\nexport const tasksReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: [...action.tasks]\r\n            }\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            const copyState = {...state}\r\n            const toDoListTasks = copyState[action.toDoListId]\r\n            copyState[action.toDoListId] = toDoListTasks.filter(t => t.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const copyState = {...state}\r\n            const tasksForToDoList = copyState[action.task.todoListId]\r\n            const newTask: TaskType = action.task\r\n            copyState[action.task.todoListId] = [newTask, ...tasksForToDoList]\r\n            return copyState\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => {\r\n                    if (t.id === action.taskId) {\r\n                        return {...t, ...action.model}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.toDoList.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODO-LISTS\": {\r\n            const stateCopy = {...state}\r\n            action.toDoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nconst setTasksAC = (tasks: Array<TaskType>, toDoListId: string) => ({type: 'SET-TASKS', tasks, toDoListId} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, toDoListId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        toDoListId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: DomainUpdateModelType, toDoListId: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    toDoListId,\r\n    taskId,\r\n    model\r\n} as const)\r\n\r\nexport const getTasksTC = (toDoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksAPI.getTasks(toDoListId).then(res => {\r\n        dispatch(setTasksAC(res.data.items, toDoListId))\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (toDoListId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksAPI.removeTask(toDoListId, taskId).then(res => {\r\n        dispatch(removeTaskAC(taskId, toDoListId))\r\n    })\r\n}\r\n\r\nexport const addTaskTC = (toDoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    tasksAPI.addTask(toDoListId, title).then(res => {\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (toDoListId: string, taskId: string, domainModel: DomainUpdateModelType) => (dispatch: Dispatch<ActionsType>, getState: () => RootStateType) => {\r\n    const task = getState().tasks[toDoListId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const apiModel: ModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            startDate: task.startDate,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(toDoListId, taskId, apiModel).then(res => {\r\n            dispatch(updateTaskAC(taskId, domainModel, toDoListId))\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntype SetTasksActionType = ReturnType<typeof setTasksAC>\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\ntype UpdateTaskActionCreator = ReturnType<typeof updateTaskAC>\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '69175483-e93a-4825-bff5-a54b5bb568e7'\r\n    }\r\n})\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D> = {\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    data: D\r\n}\r\n\r\nexport const toDoListAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<ToDoListType>>(`todo-lists`)\r\n    },\r\n    addToDoList(title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListType}>>(`todo-lists`, {title})\r\n    },\r\n    removeToDoList(toDoListId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${toDoListId}`)\r\n    },\r\n    updateToDoList(toDoListId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${toDoListId}`, {title})\r\n    }\r\n}","import {toDoListAPI, ToDoListType} from \"../api/todolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\ntype ChangeToDoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeToDoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterType\r\n    id: string\r\n}\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nexport type ToDoListDomainType = ToDoListType & {\r\n    filter: FilterType\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeToDoListTitleActionType\r\n    | ChangeToDoListFilterActionType\r\n    | SetToDoListsActionTypes\r\n\r\ntype InitialStateType = Array<ToDoListDomainType>\r\n\r\nconst initialState: InitialStateType = []\r\n\r\nexport const toDoListsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TODO-LISTS\":\r\n            return action.toDoLists.map(tl => ({...tl, filter: 'all'}))\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {...action.toDoList, filter: 'all'}]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, title: action.title}\r\n                } else {\r\n                    return tl\r\n                }\r\n            })\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, filter: action.filter}\r\n                } else {\r\n                    return tl\r\n                }\r\n            })\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setToDoLists = (toDoLists: Array<ToDoListType>) => ({type: 'SET-TODO-LISTS', toDoLists} as const)\r\nexport const removeToDoListAC = (id: string): RemoveToDoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    }\r\n}\r\nexport const addToDoListAC = (toDoList: ToDoListType) => ({type: 'ADD-TODOLIST', toDoList} as const)\r\nexport const changeToDoListTitleAC = (id: string, title: string): ChangeToDoListTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id,\r\n        title\r\n    }\r\n}\r\nexport const changeToDoListFilterAC = (filter: FilterType, id: string): ChangeToDoListFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id,\r\n        filter\r\n    }\r\n}\r\n\r\nexport const getToDoListsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    toDoListAPI.getTodos().then(res => {\r\n        dispatch(setToDoLists(res.data))\r\n    })\r\n}\r\n\r\nexport const removeToDoListTC = (toDoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    toDoListAPI.removeToDoList(toDoListId).then(res => {\r\n        dispatch(removeToDoListAC(toDoListId))\r\n    })\r\n}\r\n\r\nexport const addToDoListTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    toDoListAPI.addToDoList(title).then(res => {\r\n        dispatch(addToDoListAC(res.data.data.item))\r\n    })\r\n}\r\n\r\nexport const updateToDoListTC = (toDoListId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    toDoListAPI.updateToDoList(toDoListId, title).then(res => {\r\n        dispatch(changeToDoListTitleAC(toDoListId, title))\r\n    })\r\n}\r\n\r\nexport type SetToDoListsActionTypes = ReturnType<typeof setToDoLists>\r\nexport type AddToDoListActionType = ReturnType<typeof addToDoListAC>","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (changeTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan is called')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [changeTitle, setChangeTitle] = useState<string>('')\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setChangeTitle(props.title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChangeTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(changeTitle)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                variant={\"standard\"}\r\n                value={changeTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            /> :\r\n            <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasksAPI\";\r\n\r\nexport type TaskPropsType = {\r\n    toDoListId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n\r\n    const removeTask =() => props.removeTask(props.task.id, props.toDoListId)\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.toDoListId)\r\n    }\r\n    const changeTaskTitle = useCallback( (changeTitle: string) => {\r\n        props.changeTitle(props.task.id, changeTitle, props.toDoListId)\r\n    },[props.changeTitle, props.toDoListId, props.task.id])\r\n\r\n    return (\r\n        <div style={{paddingLeft: \"10px\"}} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={onChangeStatus}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItem} from \"./AddItem\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterType} from \"./reducers/todolists-reducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasksAPI\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"./reducers/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (value: FilterType, toDoLIstID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTitleToDoList: (toDoListID: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    console.log('ToDoList is called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n    const removeToDoList = () => props.removeToDoList(props.id)\r\n\r\n    const addTask = useCallback((changeTitle: string) => {\r\n        props.addTask(changeTitle, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTitleToDoList = useCallback((newTitle: string) => {\r\n        props.changeTitleToDoList(props.id, newTitle)\r\n    }, [props.changeTitleToDoList, props.id])\r\n\r\n    const changeFilterToAll = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const changeFilterToActive = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const changeFilterToCompleted = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTitleToDoList}/>\r\n                <IconButton onClick={removeToDoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItem addItem={addTask} title={\"Task title...\"}/>\r\n            <div>\r\n                {\r\n                    tasksForTodoList.map(task => <Task key={task.id}\r\n                                                       toDoListId={props.id}\r\n                                                       task={task}\r\n                                                       removeTask={props.removeTask}\r\n                                                       changeStatus={props.changeStatus}\r\n                                                       changeTitle={props.changeTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToAll}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItem} from \"./AddItem\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./store\";\r\nimport {addTaskTC, removeTaskTC, TasksType, updateTaskTC} from \"./reducers/tasks-reducer\";\r\nimport {\r\n    addToDoListTC,\r\n    changeToDoListFilterAC,\r\n    FilterType,\r\n    getToDoListsTC,\r\n    removeToDoListTC,\r\n    ToDoListDomainType,\r\n    updateToDoListTC,\r\n} from \"./reducers/todolists-reducer\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {TaskStatuses} from \"./api/tasksAPI\";\r\n\r\nfunction App() {\r\n    console.log('App is called')\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\r\n    const toDoLists = useSelector<RootStateType, Array<ToDoListDomainType>>(state => state.toDoLists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getToDoListsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskID: string, toDoListId: string) => {\r\n        dispatch(removeTaskTC(toDoListId, taskID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterType, toDoListId: string) => {\r\n        dispatch(changeToDoListFilterAC(value, toDoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(addTaskTC(toDoListId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, toDoListId: string) => {\r\n        dispatch(updateTaskTC(toDoListId, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const removeToDoList = useCallback((toDoListId: string) => {\r\n        dispatch(removeToDoListTC(toDoListId))\r\n    }, [dispatch])\r\n\r\n    const addToDoList = useCallback((titleForToDoList: string) => {\r\n        dispatch(addToDoListTC(titleForToDoList))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, toDoListId: string) => {\r\n        dispatch(updateTaskTC(toDoListId, taskId, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const changeTitleToDoList = useCallback((toDoListId: string, newTitle: string) => {\r\n        dispatch(updateToDoListTC(toDoListId, newTitle))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItem addItem={addToDoList} title={\"TodoList title...\"}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        toDoLists.map(tl => {\r\n\r\n                            const tasksForToDoList = tasks[tl.id]\r\n\r\n                            return <Grid key={tl.id} item>\r\n                                <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeToDoList={removeToDoList}\r\n                                        changeTitle={changeTaskTitle}\r\n                                        changeTitleToDoList={changeTitleToDoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./reducers/tasks-reducer\";\r\nimport {toDoListsReducer} from \"./reducers/todolists-reducer\";\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    toDoLists: toDoListsReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}