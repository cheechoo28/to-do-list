{"version":3,"sources":["AddItem.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItem","props","useState","error","setError","newTitleForTask","setNewTitleForTask","addTask","trim","addItem","TextField","variant","label","title","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","color","EditableSpan","editMode","setEditMode","changeTitle","setChangeTitle","onBlur","autoFocus","onDoubleClick","TodoList","newTitle","changeTitleToDoList","id","removeToDoList","Delete","tasks","map","t","key","style","paddingLeft","className","isDone","Checkbox","checked","changeStatus","removeTask","Button","size","filter","changeFilter","App","toDoListID1","v1","toDoListID2","toDoLists","setToDoLists","tasksObj","setTasks","taskID","toDoListID","toDoListTasks","toDoList","find","tl","task","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","titleForToDoList","spacing","allTasksForToDoList","tasksForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9edf4a3d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (changeTitle: string) => void\r\n    title: string\r\n}\r\n\r\nexport function AddItem(props: AddItemPropsType) {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitleForTask, setNewTitleForTask] = useState<string>('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitleForTask(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTitleForTask.trim() !== '') {\r\n            props.addItem(newTitleForTask.trim())\r\n            setNewTitleForTask('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                label={[props.title]}\r\n                value={newTitleForTask}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={error}\r\n                helperText={ error && \"Title is required!\"}\r\n            />\r\n            <IconButton onClick={addTask}>\r\n                <AddBox color={\"primary\"}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (changeTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [changeTitle, setChangeTitle] = useState<string>('')\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setChangeTitle(props.title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChangeTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(changeTitle)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                variant={\"standard\"}\r\n                value={changeTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            /> :\r\n            <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterType} from \"./App\";\r\nimport {AddItem} from \"./AddItem\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TasksType>\r\n    filter: FilterType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (value: FilterType, toDoLIstID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTitleToDoList: (toDoListID: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n\r\n    const removeToDoList = () => props.removeToDoList(props.id)\r\n    const addTask = (changeTitle: string) => {\r\n        props.addTask(changeTitle, props.id)\r\n    }\r\n    const changeTitleToDoList = (newTitle: string) => {\r\n        props.changeTitleToDoList(props.id, newTitle)\r\n    }\r\n\r\n    const changeFilterToAll = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const changeFilterToActive = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const changeFilterToCompleted = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTitleToDoList}/>\r\n                <IconButton onClick={removeToDoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItem addItem={addTask} title={\"Task title...\"}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                            const removeTask = () => props.removeTask(t.id, props.id)\r\n                            const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                            }\r\n                            const changeTaskTitle = (changeTitle: string) => {\r\n                                props.changeTitle(t.id, changeTitle, props.id)\r\n                            }\r\n                            return (\r\n                                <div key={t.id} style={{paddingLeft: \"10px\"}} className={t.isDone ? \"is-done\" : \"\"}>\r\n                                    <Checkbox checked={t.isDone} onChange={onChangeStatus}/>\r\n                                    <EditableSpan title={t.title} onChange={changeTaskTitle}/>\r\n                                    <IconButton onClick={removeTask}>\r\n                                        <Delete/>\r\n                                    </IconButton>\r\n                                </div>)\r\n                        }\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToAll}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TasksType, TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItem} from \"./AddItem\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\nexport type ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TasksObjType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const toDoListID1 = v1()\r\n    const toDoListID2 = v1()\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListsType>>([\r\n        {id: toDoListID1, title: \"What to learn\", filter: 'all'},\r\n        {id: toDoListID2, title: \"What to buy\", filter: 'all'},\r\n    ])\r\n    const [tasksObj, setTasks] = useState<TasksObjType>({\r\n        [toDoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false}\r\n        ],\r\n        [toDoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Book\", isDone: false},\r\n            {id: v1(), title: \"Pork\", isDone: false}\r\n        ]\r\n    })\r\n\r\n    function removeTask(taskID: string, toDoListID: string) {\r\n        const toDoListTasks = tasksObj[toDoListID]\r\n        tasksObj[toDoListID] = toDoListTasks.filter(t => t.id !== taskID)\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function changeFilter(value: FilterType, toDoListID: string) {\r\n        const toDoList = toDoLists.find(tl => tl.id === toDoListID)\r\n        if (toDoList) {\r\n            toDoList.filter = value\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, toDoListID: string) {\r\n        const task = {id: v1(), title: title, isDone: false}\r\n        const toDoListTasks = tasksObj[toDoListID]\r\n        tasksObj[toDoListID] = [task, ...toDoListTasks]\r\n        setTasks({...tasksObj})\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, toDoListID: string) {\r\n        const toDoListTasks = tasksObj[toDoListID]\r\n        const task = toDoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasksObj})\r\n        }\r\n    }\r\n\r\n    function removeToDoList(toDoListID: string) {\r\n        const toDoList = toDoLists.filter(tl => tl.id !== toDoListID)\r\n        if (toDoList) {\r\n            setToDoLists([...toDoList])\r\n            delete tasksObj[toDoListID]\r\n        }\r\n    }\r\n\r\n    function addToDoList(titleForToDoList: string) {\r\n        const toDoListID = v1()\r\n        const newToDoList: ToDoListsType = {id: toDoListID, title: titleForToDoList, filter: \"all\"}\r\n        setToDoLists([newToDoList, ...toDoLists])\r\n        setTasks({\r\n            ...tasksObj,\r\n            [toDoListID]: []\r\n        })\r\n    }\r\n\r\n    function changeTitle(taskID: string, newTitle: string, toDoListID: string) {\r\n        const toDoListTask = tasksObj[toDoListID]\r\n        const task = toDoListTask.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasksObj})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTitleToDoList(toDoListID: string, newTitle: string) {\r\n        const toDoList = toDoLists.find(tl => tl.id === toDoListID)\r\n        if (toDoList) {\r\n            toDoList.title = newTitle\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItem addItem={addToDoList} title={\"TodoList title...\"}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        toDoLists.map(tl => {\r\n                            const allTasksForToDoList = tasksObj[tl.id]\r\n                            let tasksForTodoList = allTasksForToDoList\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodoList = allTasksForToDoList.filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodoList = allTasksForToDoList.filter(t => t.isDone === true)\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeToDoList={removeToDoList}\r\n                                        changeTitle={changeTitle}\r\n                                        changeTitleToDoList={changeTitleToDoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}