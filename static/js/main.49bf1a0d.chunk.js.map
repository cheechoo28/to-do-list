{"version":3,"sources":["api/tasksAPI.ts","components/AddItemForm/AddItem.tsx","redux/app-reducer.ts","utils/error-utils.ts","redux/tasks-reducer.ts","api/todolistAPI.ts","redux/todolists-reducer.ts","components/EditableSpan/EditableSpan.tsx","Task.tsx","TodoList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItem","React","memo","addItem","disabled","props","console","log","useState","error","setError","newTitleForTask","setNewTitleForTask","addTask","trim","TextField","variant","label","title","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","toDoListId","get","post","taskId","delete","model","put","initialState","status","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","priority","description","startDate","then","res","resultCode","updateTaskAC","catch","toDoListAPI","EditableSpan","editMode","setEditMode","changeTitle","setChangeTitle","onBlur","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","style","paddingLeft","className","Completed","Checkbox","checked","changeStatus","New","removeTask","Delete","TodoList","demo","useDispatch","useEffect","toDoList","setTasksAC","items","changeTitleToDoList","newTitle","changeFilterToAll","changeFilter","changeFilterToActive","changeFilterToCompleted","tasksForTodoList","filter","removeToDoList","entityStatus","map","Button","size","Alert","elevation","ErrorSnackbar","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","toDoLists","taskID","removeTaskAC","removeTaskTC","item","addTaskTC","removeToDoListTC","addToDoList","titleForToDoList","changeToDoListTitleAC","updateToDoListTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","padding","spacing","tl","tasksForToDoList","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","copyState","toDoListTasks","todoListId","newTask","stateCopy","forEach","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"yGAUYA,EAOCC,E,iGCPAC,EAAUC,IAAMC,MAAK,YAA8D,IAA5DC,EAA2D,EAA3DA,QAA2D,IAAlDC,gBAAkD,SAA7BC,EAA6B,sCAC3FC,QAAQC,IAAI,qBAD+E,MAEjEC,oBAAkB,GAF+C,mBAEpFC,EAFoF,KAE7EC,EAF6E,OAG7CF,mBAAiB,IAH4B,mBAGpFG,EAHoF,KAGnEC,EAHmE,KAgBrFC,EAAU,WACmB,KAA3BF,EAAgBG,QAChBX,EAAQQ,EAAgBG,QACxBF,EAAmB,KAEnBF,GAAS,IAIjB,OACI,gCACI,cAACK,EAAA,EAAD,CACIX,SAAUA,EACVY,QAAS,WACTC,MAAO,CAACZ,EAAMa,OACdC,MAAOR,EACPS,SA3BY,SAACC,GACrBT,EAAmBS,EAAEC,cAAcH,QA2B3BI,WAzBc,SAACF,GACnBZ,GACAC,GAAS,GAEM,KAAfW,EAAEG,UACFX,KAqBIJ,MAAOA,EACPgB,WAAahB,GAAS,uBAE1B,cAACiB,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAASf,EAAST,SAAUA,EAA1D,SACI,cAACyB,EAAA,EAAD,Y,iID9CVC,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SAIPrC,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOCC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KA2CN,IAAMqC,EAAW,SACXC,GACL,OAAOP,EAASQ,IAAT,qBAAiDD,EAAjD,YAFFD,EAAW,SAIZC,EAAoBnB,GACxB,OAAOY,EAASS,KAAT,qBAAkEF,EAAlE,UAAsF,CAACnB,WALzFkB,EAAW,SAOTC,EAAoBG,GAC3B,OAAOV,EAASW,OAAT,qBAAsDJ,EAAtD,kBAA0EG,KAR5EJ,EAAW,SAUTC,EAAoBG,EAAgBE,GAC3C,OAAOZ,EAASa,IAAT,qBAAiEN,EAAjE,kBAAqFG,GAAUE,IE5DxGE,EAAiC,CACnCC,OAAQ,OACRpC,MAAO,MAqBEqC,EAAiB,SAACD,GAAD,MAAgC,CAACE,KAAM,iBAAkBF,WAC1EG,EAAgB,SAACvC,GAAD,MAA2B,CAACsC,KAAM,gBAAiBtC,UC/BnEwC,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASH,EAAcE,EAAKE,SAAS,KAErCD,EAASH,EAAc,wBAE3BG,EAASL,EAAe,YAGfQ,EAA2B,SAAC7C,EAA4B0C,GACjEA,EAASH,EAAcvC,EAAM8C,QAAU9C,EAAM8C,QAAU,wBACvDJ,EAASL,EAAe,YCyBtBF,EAAe,GAmHRY,EAAe,SAACnB,EAAoBG,EAAgBiB,GAArC,OAA4E,SAACN,EAAiCO,GACtIP,EAASL,EAAe,YACxB,IAAMa,EAAOD,IAAWE,MAAMvB,GAAYwB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOvB,KAC7D,GAAImB,EAAM,CACN,IAAMK,EAAmB,aACrB9C,MAAOyC,EAAKzC,MACZ+C,SAAUN,EAAKM,SACfpB,OAAQc,EAAKd,OACbqB,SAAUP,EAAKO,SACfC,YAAaR,EAAKQ,YAClBC,UAAWT,EAAKS,WACbX,GAEPrB,EAAoBC,EAAYG,EAAQwB,GAAUK,MAAK,SAAAC,GACvB,IAAxBA,EAAIpB,KAAKqB,YACTpB,EA5DY,SAACX,EAAgBE,EAA8BL,GAA/C,MAAuE,CAC/FU,KAAM,cACNV,aACAG,SACAE,SAwDqB8B,CAAahC,EAAQiB,EAAapB,IAC3Cc,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAChE,GACJ6C,EAAyB7C,EAAO0C,SC/K1CrB,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAkBNuC,EAAc,WAEnB,OAAO5C,EAASQ,IAAT,eAFFoC,EAAc,SAIXxD,GACR,OAAOY,EAASS,KAAT,aAAgE,CAACrB,WALnEwD,EAAc,SAORrC,GACX,OAAOP,EAASW,OAAT,qBAAgDJ,KARlDqC,EAAc,SAURrC,EAAoBnB,GAC/B,OAAOY,EAASa,IAAT,qBAA6CN,GAAc,CAACnB,WCOrE0B,EAAiC,GClC1B+B,EAAe1E,IAAMC,MAAK,SAACG,GAEpCC,QAAQC,IAAI,0BAFyD,MAIrCC,oBAAkB,GAJmB,mBAI9DoE,EAJ8D,KAIpDC,EAJoD,OAK/BrE,mBAAiB,IALc,mBAK9DsE,EAL8D,KAKjDC,EALiD,KAmBrE,OACIH,EAAW,cAAC7D,EAAA,EAAD,CACHC,QAAS,WACTG,MAAO2D,EACP1D,SAZiB,SAACC,GAC1B0D,EAAe1D,EAAEC,cAAcH,QAYvB6D,OAVQ,WAChBH,GAAY,GACZxE,EAAMe,SAAS0D,IASPG,WAAS,IAEb,sBAAMC,cApBS,WACnBL,GAAY,GACZE,EAAe1E,EAAMa,QAkBjB,SAAsCb,EAAMa,W,kBCtB3CiE,EAAOlF,IAAMC,MAAM,SAACG,GAE7B,IAIM+E,EAAkBC,uBAAa,SAACP,GAClCzE,EAAMyE,YAAYzE,EAAMsD,KAAKI,GAAIe,EAAazE,EAAMgC,cACtD,CAAChC,EAAMyE,YAAazE,EAAMgC,WAAYhC,EAAMsD,KAAKI,KAEnD,OACI,sBAAKuB,MAAO,CAACC,YAAa,QAASC,UAAWnF,EAAMsD,KAAKd,SAAW/C,EAAa2F,UAAY,UAAY,GAAzG,UACI,cAACC,EAAA,EAAD,CAAUC,QAAStF,EAAMsD,KAAKd,SAAW/C,EAAa2F,UAAWrE,SATlD,SAACC,GACpBhB,EAAMuF,aAAavF,EAAMsD,KAAKI,GAAI1C,EAAEC,cAAcqE,QAAU7F,EAAa2F,UAAY3F,EAAa+F,IAAKxF,EAAMgC,eASzG,cAACsC,EAAD,CAAczD,MAAOb,EAAMsD,KAAKzC,MAAOE,SAAUgE,IACjD,cAAC1D,EAAA,EAAD,CAAYE,QAZF,kBAAMvB,EAAMyF,WAAWzF,EAAMsD,KAAKI,GAAI1D,EAAMgC,aAYtD,SACI,cAAC0D,EAAA,EAAD,YCHHC,EAAW/F,IAAMC,MAAK,YAA0C,IAAD,IAAvC+F,YAAuC,SAAtB5F,EAAsB,wBACxEC,QAAQC,IAAI,sBAGZ,IAAM4C,EAAW+C,cAEjBC,qBAAU,WLsFY,IAAC9D,EKrFf4D,GAGJ9C,GLkFmBd,EKlFChC,EAAM+F,SAASrC,GLkFO,SAACZ,GAC/CA,EAASL,EAAe,YACxBV,EAAkBC,GAAYgC,MAAK,SAAAC,GAC/BnB,EAtBW,SAACS,EAAwBvB,GAAzB,MAAiD,CAACU,KAAM,YAAaa,QAAOvB,cAsB9EgE,CAAW/B,EAAIpB,KAAKoD,MAAOjE,IACpCc,EAASL,EAAe,sBKrFzB,IACH,IAEMjC,EAAUwE,uBAAY,SAACP,GACzBzE,EAAMQ,QAAQiE,EAAazE,EAAM+F,SAASrC,MAC3C,CAAC1D,EAAMQ,QAASR,EAAM+F,SAASrC,KAE5BwC,EAAsBlB,uBAAY,SAACmB,GACrCnG,EAAMkG,oBAAoBlG,EAAM+F,SAASrC,GAAIyC,KAC9C,CAACnG,EAAMkG,oBAAqBlG,EAAM+F,SAASrC,KAExC0C,EAAoBpB,uBAAY,WAClChF,EAAMqG,aAAa,MAAOrG,EAAM+F,SAASrC,MAC1C,CAAC1D,EAAMqG,aAAcrG,EAAM+F,SAASrC,KACjC4C,EAAuBtB,uBAAY,WACrChF,EAAMqG,aAAa,SAAUrG,EAAM+F,SAASrC,MAC7C,CAAC1D,EAAMqG,aAAcrG,EAAM+F,SAASrC,KACjC6C,EAA0BvB,uBAAY,WACxChF,EAAMqG,aAAa,YAAarG,EAAM+F,SAASrC,MAChD,CAAC1D,EAAMqG,aAAcrG,EAAM+F,SAASrC,KAGnC8C,EAAmBxG,EAAMuD,MAQ7B,MAP8B,WAA1BvD,EAAM+F,SAASU,SACfD,EAAmBA,EAAiBC,QAAO,SAAAhD,GAAC,OAAIA,EAAEjB,SAAW/C,EAAa+F,QAEhD,cAA1BxF,EAAM+F,SAASU,SACfD,EAAmBA,EAAiBC,QAAO,SAAAhD,GAAC,OAAIA,EAAEjB,SAAW/C,EAAa2F,cAI1E,gCACI,+BAAI,cAACd,EAAD,CAAczD,MAAOb,EAAM+F,SAASlF,MAAOE,SAAUmF,IACrD,cAAC7E,EAAA,EAAD,CAAYE,QAhCD,kBAAMvB,EAAM0G,eAAe1G,EAAM+F,SAASrC,KAgChB3D,SAA0C,YAAhCC,EAAM+F,SAASY,aAA9D,SACI,cAACjB,EAAA,EAAD,SAGR,cAAC/F,EAAD,CAASG,QAASU,EAASK,MAAO,gBAAiBd,SAA0C,YAAhCC,EAAM+F,SAASY,eAC5E,8BAEQH,EAAiBI,KAAI,SAAAtD,GAAI,OAAI,cAACwB,EAAD,CACM9C,WAAYhC,EAAM+F,SAASrC,GAC3BJ,KAAMA,EACNmC,WAAYzF,EAAMyF,WAClBF,aAAcvF,EAAMuF,aACpBd,YAAazE,EAAMyE,aALdnB,EAAKI,SAUrD,gCACI,cAACmD,EAAA,EAAD,CACIC,KAAM,QACNxF,MAAiC,QAA1BtB,EAAM+F,SAASU,OAAmB,YAAc,UACvD9F,QAAS,YACTY,QAAS6E,EAJb,iBAMA,cAACS,EAAA,EAAD,CACIC,KAAM,QACNxF,MAAiC,WAA1BtB,EAAM+F,SAASU,OAAsB,YAAc,UAC1D9F,QAAS,YACTY,QAAS+E,EAJb,oBAOA,cAACO,EAAA,EAAD,CACIC,KAAM,QACNxF,MAAiC,cAA1BtB,EAAM+F,SAASU,OAAyB,YAAc,UAC7D9F,QAAS,YACTY,QAASgF,EAJb,gC,oBC7FhB,SAASQ,GAAM/G,GACX,OAAO,cAAC,KAAD,aAAUgH,UAAW,EAAGrG,QAAQ,UAAaX,IAGjD,SAASiH,KAEZ,IAAMnE,EAAW+C,cAEXzF,EAAQ8G,aAA0C,SAAAC,GAAK,OAAIA,EAAMC,IAAIhH,SACrEiH,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJzE,EAASH,EAAc,QAG3B,OACI,cAAC6E,GAAA,EAAD,CAAUC,KAAgB,OAAVrH,EAAgBsH,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKxH,MC4GFyH,OAlGf,YAA4C,IAAD,IAA7BjC,YAA6B,SACvC3F,QAAQC,IAAI,iBAEZ,IAAM4C,EAAW+C,cACXtC,EAAQ2D,aAAsC,SAAAC,GAAK,OAAIA,EAAM5D,SAC7DuE,EAAYZ,aAAsD,SAAAC,GAAK,OAAIA,EAAMW,aACjFtF,EAAS0E,aAA8C,SAAAC,GAAK,OAAIA,EAAMC,IAAI5E,UAEhFsD,qBAAU,WACFF,GAGJ9C,GLuD4B,SAACA,GACjCA,EAASL,EAAe,YACxB4B,IAAuBL,MAAK,SAAAC,GACxBnB,EA7ByD,CAACJ,KAAM,iBAAkBoF,UA6B5D7D,EAAIpB,OAC1BC,EAASL,EAAe,sBK1DzB,IAEH,IAAMgD,EAAaT,uBAAY,SAAC+C,EAAgB/F,GAC5Cc,EPyEoB,SAACd,EAAoBG,GAArB,OAAwC,SAACW,GACjEA,EAASL,EAAe,YACxBV,EAAoBC,EAAYG,GAAQ6B,MAAK,SAAAC,GACb,IAAxBA,EAAIpB,KAAKqB,YACTpB,EA7BgB,SAACX,EAAgBH,GACzC,MAAO,CACHU,KAAM,cACNP,SACAH,cAyBagG,CAAa7F,EAAQH,IAC9Bc,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAAhE,GACH6C,EAAyB7C,EAAO0C,OOpF3BmF,CAAajG,EAAY+F,MACnC,CAACjF,IAEEuD,EAAerB,uBAAY,SAAClE,EAAmBkB,GACjDc,ELwCG,CACHJ,KAAM,yBACNgB,GK1CuC1B,EL2CvCyE,OK3CgC3F,MACjC,CAACgC,IAEEtC,EAAUwE,uBAAY,SAACnE,EAAemB,GACxCc,EPgFiB,SAACd,EAAoBnB,GAArB,OAAuC,SAACiC,GAC7DA,EAASL,EAAe,YACxBV,EAAiBC,EAAYnB,GAAOmD,MAAK,SAAAC,GACT,IAAxBA,EAAIpB,KAAKqB,YACTpB,EApCkC,CAACJ,KAAM,WAAYY,KAoClCW,EAAIpB,KAAKA,KAAKqF,OACjCpF,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAChE,GACJ6C,EAAyB7C,EAAO0C,OO3F3BqF,CAAUnG,EAAYnB,MAChC,CAACiC,IAEEyC,EAAeP,uBAAY,SAAC7C,EAAgBK,EAAsBR,GACpEc,EAASK,EAAanB,EAAYG,EAAQ,CAACK,cAC5C,CAACM,IAEE4D,EAAiB1B,uBAAY,SAAChD,GAChCc,EL2CwB,SAACd,GAAD,OAAwB,SAACc,GACrDA,EAASL,EAAe,YACxBK,EAvB8E,CAC9EJ,KAAM,yBACNgB,GAqBgC1B,EApBhCQ,OAoB4C,YAC5C6B,EAA2BrC,GAAYgC,MAAK,SAAAC,GACZ,IAAxBA,EAAIpB,KAAKqB,YACTpB,EArCD,CACHJ,KAAM,kBACNgB,GAmC8B1B,IAC1Bc,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAAhE,GACH6C,EAAyB7C,EAAO0C,OKvD3BsF,CAAiBpG,MAC3B,CAACc,IAEEuF,EAAcrD,uBAAY,SAACsD,GLwDR,IAACzH,EKvDtBiC,GLuDsBjC,EKvDCyH,ELuDiB,SAACxF,GAC7CA,EAASL,EAAe,YACxB4B,EAAwBxD,GAAOmD,MAAK,SAAAC,GACJ,IAAxBA,EAAIpB,KAAKqB,YACTpB,EA/C8C,CAACJ,KAAM,eAAgBqD,SA+C9C9B,EAAIpB,KAAKA,KAAKqF,OACrCpF,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAAhE,GACH6C,EAAyB7C,EAAO0C,WKjErC,CAACA,IAEEiC,EAAkBC,uBAAY,SAAC7C,EAAgBgE,EAAkBnE,GACnEc,EAASK,EAAanB,EAAYG,EAAQ,CAACtB,MAAOsF,OACnD,CAACrD,IAEEoD,EAAsBlB,uBAAY,SAAChD,EAAoBmE,GACzDrD,EL8DwB,SAACd,EAAoBnB,GAArB,OAAuC,SAACiC,GACpEA,EAASL,EAAe,YACxB4B,EAA2BrC,EAAYnB,GAAOmD,MAAK,SAAAC,GACnB,IAAxBA,EAAIpB,KAAKqB,YACTpB,EA7DyB,SAACY,EAAY7C,GAAb,MAAgC,CACjE6B,KAAM,wBACNgB,KACA7C,SA0DiB0H,CAAsBvG,EAAYnB,IAC3CiC,EAASL,EAAe,eAExBG,EAAqBqB,EAAIpB,KAAMC,MAGlCsB,OAAM,SAAAhE,GACH6C,EAAyB7C,EAAO0C,OKzE3B0F,CAAiBxG,EAAYmE,MACvC,CAACrD,IAEJ,OACI,sBAAKqC,UAAU,MAAf,UACI,cAACsD,EAAA,EAAD,CAAQC,SAAU,SAAlB,SACI,eAACC,EAAA,EAAD,WACI,cAACtH,EAAA,EAAD,CAAYuH,KAAK,QAAQtH,MAAM,UAAUuH,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYpI,QAAQ,KAApB,kBAGA,cAACkG,EAAA,EAAD,CAAQvF,MAAM,UAAd,wBAGI,YAAXkB,GAAwB,cAACwG,EAAA,EAAD,IACzB,cAAC/B,GAAD,IACA,eAACgC,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACnE,MAAO,CAACoE,QAAS,UAAjC,SACI,cAAC1J,EAAD,CAASG,QAASuI,EAAaxH,MAAO,wBAG1C,cAACsI,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQxB,EAAUlB,KAAI,SAAA2C,GAEV,IAAMC,EAAmBjG,EAAMgG,EAAG7F,IAElC,OAAO,cAACyF,EAAA,EAAD,CAAkBjB,MAAI,EAAtB,SACH,cAACuB,EAAA,EAAD,CAAOxE,MAAO,CAACoE,QAAS,QAASrC,UAAW,GAA5C,SACI,cAACrB,EAAD,CACII,SAAUwD,EAEV3D,KAAMA,EACNrC,MAAOiG,EACP/D,WAAYA,EACZY,aAAcA,EACd7F,QAASA,EACT+E,aAAcA,EACdmB,eAAgBA,EAChBjC,YAAaM,EACbmB,oBAAqBA,GAThBqD,EAAG7F,OAJF6F,EAAG7F,gBC/FlCgG,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5F,MAAK,YAAkD,IAA/C6F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCHRO,GAAeC,aAAgB,CACjC5G,MTmCwB,WAAoF,IAAnF4D,EAAkF,uDAAxD5E,EAAc6H,EAA0C,uCAC3G,OAAQA,EAAO1H,MACX,IAAK,YACD,OAAO,2BACAyE,GADP,kBAEKiD,EAAOpI,WAFZ,YAE6BoI,EAAO7G,SAGxC,IAAK,cACD,IAAM8G,EAAS,eAAOlD,GAChBmD,EAAgBD,EAAUD,EAAOpI,YAEvC,OADAqI,EAAUD,EAAOpI,YAAcsI,EAAc7D,QAAO,SAAAhD,GAAC,OAAIA,EAAEC,KAAO0G,EAAOjI,UAClEkI,EAEX,IAAK,WACD,IAAMA,EAAS,eAAOlD,GAChBqC,EAAmBa,EAAUD,EAAO9G,KAAKiH,YACzCC,EAAoBJ,EAAO9G,KAEjC,OADA+G,EAAUD,EAAO9G,KAAKiH,YAAtB,CAAqCC,GAArC,mBAAiDhB,IAC1Ca,EAEX,IAAK,cACD,OAAO,2BACAlD,GADP,kBAEKiD,EAAOpI,WAAamF,EAAMiD,EAAOpI,YAAY4E,KAAI,SAAAnD,GAC9C,OAAIA,EAAEC,KAAO0G,EAAOjI,OACT,2BAAIsB,GAAM2G,EAAO/H,OAEjBoB,OAMvB,IAAK,eACD,OAAO,2BAAI0D,GAAX,kBAAmBiD,EAAOrE,SAASrC,GAAK,KAE5C,IAAK,kBACD,IAAM2G,EAAS,eAAOlD,GAEtB,cADOkD,EAAUD,EAAO1G,IACjB2G,EAEX,IAAK,iBACD,IAAMI,EAAS,eAAOtD,GAItB,OAHAiD,EAAOtC,UAAU4C,SAAQ,SAAAnB,GACrBkB,EAAUlB,EAAG7F,IAAM,MAEhB+G,EAEX,QACI,OAAOtD,ISpFfW,UPoC4B,WAAoF,IAAnFX,EAAkF,uDAAxD5E,EAAc6H,EAA0C,uCAC/G,OAAQA,EAAO1H,MACX,IAAK,iBACD,OAAO0H,EAAOtC,UAAUlB,KAAI,SAAA2C,GAAE,kCAASA,GAAT,IAAa9C,OAAQ,MAAOE,aAAc,YAE5E,IAAK,kBACD,OAAOQ,EAAMV,QAAO,SAAA8C,GAAE,OAAIA,EAAG7F,KAAO0G,EAAO1G,MAE/C,IAAK,eACD,MAAM,GAAN,mBAAWyD,GAAX,4BAAsBiD,EAAOrE,UAA7B,IAAuCU,OAAQ,MAAOE,aAAc,WAExE,IAAK,wBACD,OAAOQ,EAAMP,KAAI,SAAA2C,GACb,OAAIA,EAAG7F,KAAO0G,EAAO1G,GACV,2BAAI6F,GAAX,IAAe1I,MAAOuJ,EAAOvJ,QAEtB0I,KAInB,IAAK,yBACD,OAAOpC,EAAMP,KAAI,SAAA2C,GAAE,OAAIA,EAAG7F,KAAO0G,EAAO1G,GAAjB,2BAA0B6F,GAA1B,IAA8B9C,OAAQ2D,EAAO3D,SAAU8C,KAElF,IAAK,yBACD,OAAOpC,EAAMP,KAAI,SAAA2C,GAAE,OAAIA,EAAG7F,KAAO0G,EAAO1G,GAAjB,2BAA0B6F,GAA1B,IAA8B5C,aAAcyD,EAAO5H,SAAU+G,KAExF,QACI,OAAOpC,IO9DfC,IXOsB,WAAoF,IAAnFD,EAAkF,uDAAxD5E,EAAc6H,EAA0C,uCACzG,OAAQA,EAAO1H,MACX,IAAK,iBACD,OAAO,2BACAyE,GADP,IAEI3E,OAAQ4H,EAAO5H,SAEvB,IAAK,gBACD,OAAO,2BACA2E,GADP,IAEI/G,MAAOgK,EAAOhK,QAGtB,QACI,OAAO+G,MWjBNwD,GAAQC,aAAYV,GAAcW,aAAgBC,OAK/DC,OAAOJ,MAAQA,GCVfK,IAASC,OAAO,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACZ,cAAC,GAAD,MACSO,SAASC,eAAe,SAKrCzB,M","file":"static/js/main.49bf1a0d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '69175483-e93a-4825-bff5-a54b5bb568e7'\r\n    }\r\n})\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft= 3\r\n}\r\n\r\nexport  enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\ntype CommonResponseType<D> = {\r\n    data: D\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport type ModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(toDoListId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${toDoListId}/tasks`)\r\n    },\r\n    addTask(toDoListId: string, title: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType}>>(`todo-lists/${toDoListId}/tasks`, {title})\r\n    },\r\n    removeTask(toDoListId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${toDoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(toDoListId: string, taskId: string, model: ModelType) {\r\n        return instance.put<CommonResponseType<{item: TaskType}>>(`todo-lists/${toDoListId}/tasks/${taskId}`, model)\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (changeTitle: string) => void\r\n    title: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItem = React.memo(({addItem, disabled = false, ...props}: AddItemPropsType) => {\r\n    console.log('AddItem is called')\r\n    const [error, setError] = useState<boolean>(false)\r\n    const [newTitleForTask, setNewTitleForTask] = useState<string>('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitleForTask(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (newTitleForTask.trim() !== '') {\r\n            addItem(newTitleForTask.trim())\r\n            setNewTitleForTask('')\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={disabled}\r\n                variant={\"outlined\"}\r\n                label={[props.title]}\r\n                value={newTitleForTask}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={error}\r\n                helperText={ error && \"Title is required!\"}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addTask} disabled={disabled}>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nexport type ActionsType = SetAppStatusActionType | SetAppErrorActionType\r\n\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"APP/SET-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../redux/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolistAPI\"\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {AddToDoListActionType, RemoveToDoListActionType, SetToDoListsActionTypes} from \"./todolists-reducer\";\r\nimport {ModelType, TaskPriorities, tasksAPI, TaskStatuses, TaskType} from \"../api/tasksAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RootStateType} from \"./store\";\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    toDoListId: string\r\n}\r\n\r\nexport type DomainUpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | AddToDoListActionType\r\n    | RemoveToDoListActionType\r\n    | SetToDoListsActionTypes\r\n    | SetTasksActionType\r\n    | UpdateTaskActionCreator\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n\r\n\r\ntype initialStateType = TasksType\r\n\r\nconst initialState = {}\r\n\r\nexport const tasksReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: [...action.tasks]\r\n            }\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            const copyState = {...state}\r\n            const toDoListTasks = copyState[action.toDoListId]\r\n            copyState[action.toDoListId] = toDoListTasks.filter(t => t.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const copyState = {...state}\r\n            const tasksForToDoList = copyState[action.task.todoListId]\r\n            const newTask: TaskType = action.task\r\n            copyState[action.task.todoListId] = [newTask, ...tasksForToDoList]\r\n            return copyState\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => {\r\n                    if (t.id === action.taskId) {\r\n                        return {...t, ...action.model}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.toDoList.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case \"SET-TODO-LISTS\": {\r\n            const stateCopy = {...state}\r\n            action.toDoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nconst setTasksAC = (tasks: Array<TaskType>, toDoListId: string) => ({type: 'SET-TASKS', tasks, toDoListId} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, toDoListId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        toDoListId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: DomainUpdateModelType, toDoListId: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    toDoListId,\r\n    taskId,\r\n    model\r\n} as const)\r\n\r\nexport const getTasksTC = (toDoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(toDoListId).then(res => {\r\n        dispatch(setTasksAC(res.data.items, toDoListId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\n\r\nexport const removeTaskTC = (toDoListId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.removeTask(toDoListId, taskId).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, toDoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (toDoListId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.addTask(toDoListId, title).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (toDoListId: string, taskId: string, domainModel: DomainUpdateModelType) => (dispatch: Dispatch<ActionsType>, getState: () => RootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const task = getState().tasks[toDoListId].find(t => t.id === taskId)\r\n    if (task) {\r\n        const apiModel: ModelType = {\r\n            title: task.title,\r\n            deadline: task.deadline,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            startDate: task.startDate,\r\n            ...domainModel\r\n        }\r\n        tasksAPI.updateTask(toDoListId, taskId, apiModel).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, domainModel, toDoListId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n}\r\n\r\ntype SetTasksActionType = ReturnType<typeof setTasksAC>\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\ntype UpdateTaskActionCreator = ReturnType<typeof updateTaskAC>\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '69175483-e93a-4825-bff5-a54b5bb568e7'\r\n    }\r\n})\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D> = {\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    resultCode: number\r\n    data: D\r\n}\r\n\r\nexport const toDoListAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<ToDoListType>>(`todo-lists`)\r\n    },\r\n    addToDoList(title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListType}>>(`todo-lists`, {title})\r\n    },\r\n    removeToDoList(toDoListId: string) {\r\n        return instance.delete<ResponseType<{}>>(`todo-lists/${toDoListId}`)\r\n    },\r\n    updateToDoList(toDoListId: string, title: string) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${toDoListId}`, {title})\r\n    }\r\n}","import {toDoListAPI, ToDoListType} from \"../api/todolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RemoveToDoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\ntype ChangeToDoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    filter: FilterType\r\n    id: string\r\n}\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\"\r\n\r\n\r\nexport type ToDoListDomainType = ToDoListType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ActionsType =\r\n    RemoveToDoListActionType\r\n    | AddToDoListActionType\r\n    | ChangeToDoListTitleActionType\r\n    | ChangeToDoListFilterActionType\r\n    | SetToDoListsActionTypes\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeToDoListStatusActionType\r\n\r\ntype InitialStateType = Array<ToDoListDomainType>\r\n\r\nconst initialState: InitialStateType = []\r\n\r\nexport const toDoListsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TODO-LISTS\":\r\n            return action.toDoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return [...state, {...action.toDoList, filter: 'all', entityStatus: 'idle'}]\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            return state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, title: action.title}\r\n                } else {\r\n                    return tl\r\n                }\r\n            })\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-STATUS\": {\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setToDoLists = (toDoLists: Array<ToDoListType>) => ({type: 'SET-TODO-LISTS', toDoLists} as const)\r\nexport const removeToDoListAC = (id: string): RemoveToDoListActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id\r\n    }\r\n}\r\nexport const addToDoListAC = (toDoList: ToDoListType) => ({type: 'ADD-TODOLIST', toDoList} as const)\r\nexport const changeToDoListTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeToDoListStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const changeToDoListFilterAC = (filter: FilterType, id: string): ChangeToDoListFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id,\r\n        filter\r\n    }\r\n}\r\n\r\nexport const getToDoListsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    toDoListAPI.getTodos().then(res => {\r\n        dispatch(setToDoLists(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\n\r\nexport const removeToDoListTC = (toDoListId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeToDoListStatusAC(toDoListId, 'loading'))\r\n    toDoListAPI.removeToDoList(toDoListId).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeToDoListAC(toDoListId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addToDoListTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    toDoListAPI.addToDoList(title).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addToDoListAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateToDoListTC = (toDoListId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    toDoListAPI.updateToDoList(toDoListId, title).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(changeToDoListTitleAC(toDoListId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport type SetToDoListsActionTypes = ReturnType<typeof setToDoLists>\r\nexport type AddToDoListActionType = ReturnType<typeof addToDoListAC>\r\nexport type ChangeToDoListTitleActionType = ReturnType<typeof changeToDoListTitleAC>\r\nexport type ChangeToDoListStatusActionType = ReturnType<typeof changeToDoListStatusAC>","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (changeTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan is called')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [changeTitle, setChangeTitle] = useState<string>('')\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setChangeTitle(props.title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChangeTitle(e.currentTarget.value)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(changeTitle)\r\n    }\r\n\r\n    return (\r\n        editMode ? <TextField\r\n                variant={\"standard\"}\r\n                value={changeTitle}\r\n                onChange={onChangeTitleHandler}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            /> :\r\n            <span onDoubleClick={activeEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasksAPI\";\r\n\r\nexport type TaskPropsType = {\r\n    toDoListId: string\r\n    task: TaskType\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n}\r\nexport const Task = React.memo ((props: TaskPropsType) => {\r\n\r\n    const removeTask =() => props.removeTask(props.task.id, props.toDoListId)\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.toDoListId)\r\n    }\r\n    const changeTaskTitle = useCallback( (changeTitle: string) => {\r\n        props.changeTitle(props.task.id, changeTitle, props.toDoListId)\r\n    },[props.changeTitle, props.toDoListId, props.task.id])\r\n\r\n    return (\r\n        <div style={{paddingLeft: \"10px\"}} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={onChangeStatus}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>)\r\n\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItem} from \"./components/AddItemForm/AddItem\";\r\nimport {EditableSpan} from \"./components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {FilterType, ToDoListDomainType} from \"./redux/todolists-reducer\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasksAPI\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"./redux/tasks-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    toDoList: ToDoListDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeFilter: (value: FilterType, toDoLIstID: string) => void\r\n    addTask: (title: string, toDoListID: string) => void\r\n    changeStatus: (taskID: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTitle: (taskID: string, newTitle: string, toDoListId: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTitleToDoList: (toDoListID: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: PropsType) => {\r\n    console.log('ToDoList is called')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(getTasksTC(props.toDoList.id))\r\n    }, [])\r\n    const removeToDoList = () => props.removeToDoList(props.toDoList.id)\r\n\r\n    const addTask = useCallback((changeTitle: string) => {\r\n        props.addTask(changeTitle, props.toDoList.id)\r\n    }, [props.addTask, props.toDoList.id])\r\n\r\n    const changeTitleToDoList = useCallback((newTitle: string) => {\r\n        props.changeTitleToDoList(props.toDoList.id, newTitle)\r\n    }, [props.changeTitleToDoList, props.toDoList.id])\r\n\r\n    const changeFilterToAll = useCallback(() => {\r\n        props.changeFilter(\"all\", props.toDoList.id)\r\n    }, [props.changeFilter, props.toDoList.id])\r\n    const changeFilterToActive = useCallback(() => {\r\n        props.changeFilter(\"active\", props.toDoList.id)\r\n    }, [props.changeFilter, props.toDoList.id])\r\n    const changeFilterToCompleted = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.toDoList.id)\r\n    }, [props.changeFilter, props.toDoList.id])\r\n\r\n\r\n    let tasksForTodoList = props.tasks\r\n    if (props.toDoList.filter === \"active\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.toDoList.filter === \"completed\") {\r\n        tasksForTodoList = tasksForTodoList.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.toDoList.title} onChange={changeTitleToDoList}/>\r\n                <IconButton onClick={removeToDoList} disabled={props.toDoList.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItem addItem={addTask} title={\"Task title...\"} disabled={props.toDoList.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodoList.map(task => <Task key={task.id}\r\n                                                       toDoListId={props.toDoList.id}\r\n                                                       task={task}\r\n                                                       removeTask={props.removeTask}\r\n                                                       changeStatus={props.changeStatus}\r\n                                                       changeTitle={props.changeTitle}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.toDoList.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToAll}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.toDoList.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToActive}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.toDoList.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    variant={\"contained\"}\r\n                    onClick={changeFilterToCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {setAppErrorAC} from \"../../redux/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<RootStateType, string | null>(state => state.app.error)\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {AddItem} from \"./components/AddItemForm/AddItem\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"./redux/store\";\r\nimport {addTaskTC, removeTaskTC, TasksType, updateTaskTC} from \"./redux/tasks-reducer\";\r\nimport {\r\n    addToDoListTC,\r\n    changeToDoListFilterAC,\r\n    FilterType,\r\n    getToDoListsTC,\r\n    removeToDoListTC,\r\n    ToDoListDomainType,\r\n    updateToDoListTC,\r\n} from \"./redux/todolists-reducer\";\r\nimport {TodoList} from \"./TodoList\";\r\nimport {TaskStatuses} from \"./api/tasksAPI\";\r\nimport {RequestStatusType} from \"./redux/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: AppPropsType) {\r\n    console.log('App is called')\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\r\n    const toDoLists = useSelector<RootStateType, Array<ToDoListDomainType>>(state => state.toDoLists)\r\n    const status = useSelector<RootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(getToDoListsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskID: string, toDoListId: string) => {\r\n        dispatch(removeTaskTC(toDoListId, taskID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterType, toDoListId: string) => {\r\n        dispatch(changeToDoListFilterAC(value, toDoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, toDoListId: string) => {\r\n        dispatch(addTaskTC(toDoListId, title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, toDoListId: string) => {\r\n        dispatch(updateTaskTC(toDoListId, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const removeToDoList = useCallback((toDoListId: string) => {\r\n        dispatch(removeToDoListTC(toDoListId))\r\n    }, [dispatch])\r\n\r\n    const addToDoList = useCallback((titleForToDoList: string) => {\r\n        dispatch(addToDoListTC(titleForToDoList))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, toDoListId: string) => {\r\n        dispatch(updateTaskTC(toDoListId, taskId, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const changeTitleToDoList = useCallback((toDoListId: string, newTitle: string) => {\r\n        dispatch(updateToDoListTC(toDoListId, newTitle))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress/>}\r\n            <ErrorSnackbar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItem addItem={addToDoList} title={\"TodoList title...\"}/>\r\n                </Grid>\r\n\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        toDoLists.map(tl => {\r\n\r\n                            const tasksForToDoList = tasks[tl.id]\r\n\r\n                            return <Grid key={tl.id} item>\r\n                                <Paper style={{padding: \"20px\"}} elevation={10}>\r\n                                    <TodoList\r\n                                        toDoList={tl}\r\n                                        key={tl.id}\r\n                                        demo={demo}\r\n                                        tasks={tasksForToDoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        removeToDoList={removeToDoList}\r\n                                        changeTitle={changeTaskTitle}\r\n                                        changeTitleToDoList={changeTitleToDoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {toDoListsReducer} from \"./todolists-reducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    toDoLists: toDoListsReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducers>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(<Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}